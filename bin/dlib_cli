#!/usr/bin/env python
# coding=utf-8
# https://pytorch-lightning.readthedocs.io/en/latest/common/lightning_cli.html
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
import sys

from pytorch_lightning.core.datamodule import LightningDataModule
from disentanglement_lib.methods.unsupervised.train import DataModule , PLModel
from disentanglement_lib.data.named_data import get_named_ground_truth_data

import os
import argparse
import pathlib
import shutil
import gin

from pytorch_lightning.utilities.cli import LightningCLI, SaveConfigCallback
import pytorch_lightning as pl
from pytorch_lightning.loggers import CSVLogger, LightningLoggerBase
import torch


class MyLightningCLI(LightningCLI):
    def __init__(self,*args, **kwargs, ) -> None:
        super().__init__(*args, **kwargs)
        
    def add_arguments_to_parser(self, parser):
        parser.add_optimizer_args(torch.optim.Adam)
        parser.add_argument('--gin',type=str,default="model.gin")
        return parser
        
    def before_instantiate_classes(self) -> None:
        """Implement to run some code before instantiating the classes."""
        # print(list(self.config.__dict__.keys()))
        gin_file=self.config.fit.gin
        if os.path.exists(gin_file):
            gin.parse_config_file(gin_file,True,True)
            print(gin.config_str())

from pytorch_lightning.utilities.cli import LightningArgumentParser
from pytorch_lightning.utilities.cloud_io import get_filesystem
from argparse import Namespace
from typing import Any, Callable, Dict, List, Optional, Set, Tuple, Type, Union
from pytorch_lightning import Callback, LightningDataModule, LightningModule, seed_everything, Trainer
class SaveConfigCallback(Callback):
    """Saves a LightningCLI config to the log_dir when training starts.

    Args:
        parser: The parser object used to parse the configuration.
        config: The parsed configuration that will be saved.
        config_filename: Filename for the config file.
        overwrite: Whether to overwrite an existing config file.
        multifile: When input is multiple config files, saved config preserves this structure.

    Raises:
        RuntimeError: If the config file already exists in the directory to avoid overwriting a previous run
    """

    def __init__(
        self,
        parser: LightningArgumentParser,
        config: Namespace,
        config_filename: str,
        overwrite: bool = False,
        multifile: bool = False,
    ) -> None:
        self.parser = parser
        self.config = config
        self.config_filename = config_filename
        self.overwrite = overwrite
        self.multifile = multifile

    def setup(self, trainer: Trainer, pl_module: LightningModule, stage: Optional[str] = None) -> None:
        log_dir = trainer.log_dir  # this broadcasts the directory
        assert log_dir is not None
        config_path = os.path.join(log_dir, self.config_filename)
        fs = get_filesystem(log_dir)

        if not self.overwrite:
            # check if the file exists on rank 0
            file_exists = fs.isfile(config_path) if trainer.is_global_zero else False
            # broadcast whether to fail to all ranks
            file_exists = trainer.strategy.broadcast(file_exists)
            if file_exists:
                raise RuntimeError(
                    f"{self.__class__.__name__} expected {config_path} to NOT exist. Aborting to avoid overwriting"
                    " results of a previous run. You can delete the previous config file,"
                    " set `LightningCLI(save_config_callback=None)` to disable config saving,"
                    " or set `LightningCLI(save_config_overwrite=True)` to overwrite the config file."
                )

        # save the file on rank 0
        if trainer.is_global_zero:
            # save only on rank zero to avoid race conditions.
            # the `log_dir` needs to be created as we rely on the logger to do it usually
            # but it hasn't logged anything at this point
            fs.makedirs(log_dir, exist_ok=True)
            self.parser.save(
                self.config, config_path, skip_none=False, overwrite=self.overwrite, multifile=self.multifile
            )

if __name__ == '__main__':
    cli = MyLightningCLI(
        PLModel, DataModule,
        env_parse=True,
        save_config_callback=None,
        parser_kwargs={
            "default_config_files": ["cli_default.yaml"],
            },
        # run=False
        auto_registry=True
        )
    
