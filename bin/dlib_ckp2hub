#!/usr/bin/env python
# coding=utf-8
# Copyright 2018 The DisentanglementLib Authors.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import os

import tensorflow_hub as hub
import tensorflow as tf
from disentanglement_lib.data.ground_truth import named_data
from disentanglement_lib.data.ground_truth import util
from disentanglement_lib.methods.unsupervised import gaussian_encoder_model
from disentanglement_lib.methods.unsupervised import vae  # pylint: disable=unused-import
from disentanglement_lib.utils import results
import numpy as np
from absl import app
from absl import flags
import tensorflow.compat.v1 as tf
import gin.tf.external_configurables  # pylint: disable=unused-import
import gin.tf
import gin

FLAGS = flags.FLAGS

flags.DEFINE_string("input_dir", None, "Directory to take trained "
                                       "representation from.")
flags.DEFINE_integer("checkpoint", 0, "Directory to save scores to.")


@gin.configurable("model", deneylist=[])
def model(model=gin.REQUIRED):
    model_dir = FLAGS.input_dir
    checkpoint = FLAGS.checkpoint
    checkpoint_path = os.path.join(model_dir, 'tf_checkpoint', f'model.ckpt-{checkpoint}')
    output_shape = named_data.get_named_ground_truth_data().observation_shape
    module_export_path = os.path.join(model_dir, "tfhub")
    if os.path.exists(module_export_path):
        tf.gfile.DeleteRecursively(module_export_path)
    gaussian_encoder_model.export_as_tf_hub(model, output_shape,
                                            checkpoint_path,
                                            module_export_path)


def main(_):
    model()

gin_bindings = [
]

if __name__ == "__main__":
    gin.parse_config_files_and_bindings(['train.gin'], gin_bindings, skip_unknown=True)
    print(gin.operative_config_str())
    app.run(main)
