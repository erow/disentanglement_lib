#!/usr/bin/env python
# coding=utf-8
# Copyright 2018 The DisentanglementLib Authors.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Evaluation module for disentangled representations.
Example:
import os, gin
import glob
import argparse
import numpy as np
from disentanglement_lib.evaluation import evaluate
models = glob.glob('../outputs/saved_results/main/*/*.gin',recursive=True)

for file in models[-2::-1]:
    ckpt = glob.glob(os.path.dirname(file)+"/checkpoints/*.ckpt")
    steps = [int(i.split('step=')[1].split('.ckpt')[0]) for i in ckpt]
    last = ckpt[np.argmax(steps)]
    args = argparse.Namespace(
        output_dir = os.path.dirname(file),
        model_config=file,checkpoint=last,
        evaluation_config=[ "../disentanglement_lib/config/unsupervised_study_v1/metric_configs/" + i 
            for i in ["mig.gin","dci.gin","factor_vae_metric.gin"]
            ],
        overwrite=False)

    summary = {}
    for gin_eval_config in (args.evaluation_config):
        metric_name = os.path.basename(gin_eval_config).replace(".gin", "")
        metric_dir = os.path.join(args.output_dir, 'metrics', metric_name)
        gin_config_files = [gin_eval_config, args.model_config]
        gin_bindings = [
            "evaluation.name = '{}'".format(metric_name)
        ]
        try:
            gin.clear_config()
            res=evaluate.evaluate_with_gin(args.checkpoint, metric_dir, args.overwrite,
                                        gin_config_files, gin_bindings)
            if res: summary.update(res)
        except Exception as e:
            print(e)   
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
import os, gin
import glob
import argparse
import numpy as np
from disentanglement_lib.evaluation import evaluate

parser = argparse.ArgumentParser()
parser.add_argument("--output_dir", help="Directory to save results.")         
parser.add_argument("--model_config",type=str,default='model.gin')                          
parser.add_argument("--checkpoint", help="Patch of the checkpoint.")                              
parser.add_argument("-c", "--evaluation_config",
                          help="List of paths to the config files. One config file refers to one metric.")
parser.add_argument("--overwrite", default=False, action='store_true')


def main(args):
    # We either allow multiple scores to be computed via the
    # gin_evaluation_config_glob flag or a single score via the gin_config and
    # gin_bindings flags.
    summary = {}
    for gin_eval_config in sorted(glob.glob(args.evaluation_config)):
        metric_name = os.path.basename(gin_eval_config).replace(".gin", "")
        metric_dir = os.path.join(args.output_dir, metric_name)
        gin_config_files = [gin_eval_config, args.model_config]
        gin_bindings = [
            "evaluation.name = '{}'".format(metric_name)
        ]
        res=evaluate.evaluate_with_gin(args.checkpoint, metric_dir, args.overwrite,
                                    gin_config_files, gin_bindings)
        summary.update(res)
    return summary


if __name__ == "__main__":
    args = parser.parse_args()
    main(args)