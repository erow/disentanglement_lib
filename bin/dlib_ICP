#!/usr/bin/env python
# coding=utf-8
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
import os
import argparse
import pathlib
import shutil

import torch
import wandb
from pytorch_lightning.loggers import WandbLogger
import pytorch_lightning as pl

from disentanglement_lib.config.unsupervised_study_v1.sweep import UnsupervisedStudyV1
from disentanglement_lib.methods.unsupervised import train
from disentanglement_lib.data.ground_truth.ground_truth_data import RandomAction
from disentanglement_lib.data.ground_truth import get_named_ground_truth_data
import gin

if __name__ == '__main__':
    study = UnsupervisedStudyV1()

    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument('--factor', )

    args, unknown = parser.parse_known_args()

    gin_bindings = ['train.model=@annealing', ]
    gin_bindings += [i[2:] for i in unknown]
    _, share_conf = study.get_model_config()
    gin.parse_config_files_and_bindings([share_conf], gin_bindings,
                                        print_includes_and_imports=True)

    logger = WandbLogger(project='dlib', tags=['ICP'])
    print(logger.experiment.url)
    wandb.config['factor'] = int(args.factor)

    data = get_named_ground_truth_data()
    pl_model = train.Train(data_fun=lambda: RandomAction(data, int(args.factor)))
    trainer = pl.Trainer(logger,
                         max_steps=pl_model.training_steps,
                         checkpoint_callback=False,
                         progress_bar_refresh_rate=0,
                         gpus=1, )

    trainer.fit(pl_model)
